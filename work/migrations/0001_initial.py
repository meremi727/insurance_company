# Generated by Django 5.0.4 on 2024-05-09 13:24

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='ContractStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=40, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Статус договора',
                'verbose_name_plural': 'Статусы договоров',
            },
        ),
        migrations.CreateModel(
            name='ContractType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип договора',
                'verbose_name_plural': 'Типы договора',
            },
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('square', models.FloatField(verbose_name='Площадь')),
                ('address', models.CharField(max_length=250, verbose_name='Адрес')),
                ('scan_tech_plan', models.ImageField(upload_to='scans/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'PDF'], 'Поддерждиваются только PDF файлы', 400)], verbose_name='Скан технического плана')),
                ('scan_doc_owner', models.ImageField(upload_to='scans/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'PDF'], 'Поддерждиваются только PDF файлы', 400)], verbose_name='Скан документа на владение')),
            ],
            options={
                'verbose_name': 'Недвижимость',
                'verbose_name_plural': 'Недвижимости',
            },
        ),
        migrations.CreateModel(
            name='Pasport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1000, 'Серия указана неверно'), django.core.validators.MaxValueValidator(9999, 'Серия указана неверно')], verbose_name='Серия')),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(100000, 'Номер указан неверно'), django.core.validators.MaxValueValidator(999999, 'Номер указан неверно')], verbose_name='Номер')),
                ('date_of_issue', models.DateField(validators=[django.core.validators.MaxValueValidator(datetime.date.today, 'Дата выдачи не может быть больше текущего дня')], verbose_name='Дата выдачи')),
                ('who_issued', models.CharField(max_length=200, verbose_name='Кем выдан')),
                ('who_issued_code', models.IntegerField(validators=[django.core.validators.MinValueValidator(100000, 'Код подразделения должен быть 6-значным'), django.core.validators.MaxValueValidator(999999, 'Код подразделения должен быть 6-значным')], verbose_name='Код подразделения')),
                ('scan', models.FileField(upload_to='pasport/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'PDF'], 'Поддерждиваются только PDF файлы', 400)], verbose_name='Скан паспорта')),
            ],
            options={
                'verbose_name': 'Паспорт',
                'verbose_name_plural': 'Паспорта',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, null=True, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(verbose_name='Дата рождения')),
                ('gender', models.BooleanField(choices=[(True, 'Мужской'), (False, 'Женский')], verbose_name='Пол')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефон')),
            ],
            options={
                'verbose_name': 'Персона',
                'verbose_name_plural': 'Персоны',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='work.person', verbose_name='Персона')),
            ],
            options={
                'verbose_name': 'Работник',
                'verbose_name_plural': 'Работники',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True, verbose_name='Дата создания')),
                ('period', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1, 'Страхование производится минимум на год'), django.core.validators.MaxValueValidator(100, 'Слишком большой срок страхования')], verbose_name='Срок страхования (в годах)')),
                ('cost', models.DecimalField(decimal_places=10, max_digits=50, validators=[django.core.validators.MinValueValidator(0, 'Стоимость договора слишком мала')], verbose_name='Стоимость договора')),
                ('insuranceSum', models.DecimalField(decimal_places=10, max_digits=50, validators=[django.core.validators.MinValueValidator(100, 'Страховая сумма слишком мала')], verbose_name='Страховая сумма')),
                ('scan', models.ImageField(upload_to='pasport/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'PDF'], 'Поддерждиваются только PDF файлы', 400)], verbose_name='Скан договора')),
                ('insurance_object_id', models.PositiveIntegerField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.client', verbose_name='Клиент')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник, заключивший договор')),
                ('insurance_object_content_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='contenttypes.contenttype', verbose_name='Объект (субъект) страхования')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.contractstatus', verbose_name='Статус')),
                ('contract_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.contracttype', verbose_name='Тип договора')),
            ],
            options={
                'verbose_name': 'Договор страхования',
                'verbose_name_plural': 'Договоры страхования',
            },
        ),
        migrations.CreateModel(
            name='IncidentDecision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(choices=[(True, 'Случай страховой'), (False, 'Случай НЕ страховой')], verbose_name='Решение')),
                ('sum', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='Сумма страховой выплаты')),
                ('content', models.TextField(verbose_name='Основание')),
                ('datetime_of_decision', models.DateTimeField(auto_now_add=True, verbose_name='Дата принятия решения')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Работник, принявший решение по инциденту')),
            ],
            options={
                'verbose_name': 'Решение по инциденту',
                'verbose_name_plural': 'Решения по инцидентам',
            },
        ),
        migrations.AddField(
            model_name='client',
            name='pasport',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.pasport', verbose_name='Паспорт'),
        ),
        migrations.AddField(
            model_name='client',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='work.person', verbose_name='Персона'),
        ),
        migrations.CreateModel(
            name='PersonInsurance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pasport', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.pasport', verbose_name='Паспорт')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='work.person', verbose_name='Персона')),
            ],
            options={
                'verbose_name': 'Субъект страхования',
                'verbose_name_plural': 'Субъекты страхования',
            },
        ),
        migrations.CreateModel(
            name='TicketIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now_add=True, verbose_name='Дата создания заявки')),
                ('content', models.TextField(verbose_name='Содержание')),
                ('proofs', models.FileField(upload_to='docs/%Y/%m/%d/', verbose_name='Подтверждающие документы')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='work.contract', verbose_name='Договор страхования')),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work.incidentdecision')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='Работник, принявший заявку')),
            ],
            options={
                'verbose_name': 'Заявка об инциденте',
                'verbose_name_plural': 'Заявки об инцидентах',
            },
        ),
    ]
